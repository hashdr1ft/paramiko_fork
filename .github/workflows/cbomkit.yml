name: CBOMKit Scan and Push to Wazuh

on:
  workflow_dispatch:         # Manual trigger
  schedule:
    - cron: '0 1 * * *'      # Daily at 1 AM UTC

permissions:
  contents: read

jobs:
  cbom_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CBOMKit and generate report
        run: |
          docker run --rm -v ${{ github.workspace }}:/repo ghcr.io/ibm/cbomkit:latest /repo > cbom_raw.json

      - name: Install Python requests
        run: pip install requests

      - name: Push CBOM to Elasticsearch
        env:
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
          ELASTIC_PASS: ${{ secrets.ELASTIC_PASS }}
        run: |
          echo "import json, requests, os" > send_to_es.py
          echo "with open('cbom_raw.json') as f:" >> send_to_es.py
          echo "    cbom = json.load(f)" >> send_to_es.py
          echo "assets = cbom.get('cryptographic_assets', [])" >> send_to_es.py
          echo "url = os.environ['ELASTIC_URL']" >> send_to_es.py
          echo "auth = (os.environ['ELASTIC_USER'], os.environ['ELASTIC_PASS'])" >> send_to_es.py
          echo "for asset in assets:" >> send_to_es.py
          echo "    doc = {" >> send_to_es.py
          echo "        'repo': os.environ.get('GITHUB_REPOSITORY')," >> send_to_es.py
          echo "        'file': asset.get('location')," >> send_to_es.py
          echo "        'algorithm': asset.get('algorithm')," >> send_to_es.py
          echo "        'library': asset.get('library')," >> send_to_es.py
          echo "        'pq_safe': asset.get('pq_safe', False)," >> send_to_es.py
          echo "        'risk_level': asset.get('risk_level', 'unknown')," >> send_to_es.py
          echo "        'scanner': cbom.get('scanner', '')," >> send_to_es.py
          echo "        'generated_at': cbom.get('bomTimestamp', '')" >> send_to_es.py
          echo "    }" >> send_to_es.py
          echo "    res = requests.post(f'{url}/cbomkit-reports/_doc', json=doc, auth=auth)" >> send_to_es.py
          echo "    print(res.status_code, res.text)" >> send_to_es.py
          python3 send_to_es.py
