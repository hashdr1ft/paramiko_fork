name: CBOMKit Scan and Push to Wazuh

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

jobs:
  cbom_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Run CBOMKit and generate report
        run: |
          docker run --rm -v "${{ github.workspace }}:/repo" ghcr.io/ibm/cbomkit:latest /repo > cbom_raw.json

      - name: Push CBOM to Elasticsearch
        env:
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
          ELASTIC_PASS: ${{ secrets.ELASTIC_PASS }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 - << 'EOF'
          import json, os, requests

          with open('cbom_raw.json') as f:
              cbom = json.load(f)

          assets = cbom.get('cryptographic_assets', [])
          url = os.environ['ELASTIC_URL']
          auth = (os.environ['ELASTIC_USER'], os.environ['ELASTIC_PASS'])

          for asset in assets:
              doc = {
                  'repo': os.environ.get('GITHUB_REPOSITORY'),
                  'file': asset.get('location'),
                  'algorithm': asset.get('algorithm'),
                  'library': asset.get('library'),
                  'pq_safe': asset.get('pq_safe', False),
                  'risk_level': asset.get('risk_level', 'unknown'),
                  'scanner': cbom.get('scanner', ''),
                  'generated_at': cbom.get('bomTimestamp', '')
              }
              res = requests.post(f'{url}/cbomkit-reports/_doc', json=doc, auth=auth)
              print(res.status_code, res.text)
          EOF
