name: CBOMKit Scan and Push to Wazuh

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  cbom-scan:
    runs-on: ubuntu-latest
    name: Generate CBOM

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull CBOMKit image
        run: docker pull ghcr.io/ibm/cbomkit:latest

      - name: Run CBOMKit â†’ JSON
        run: |
          mkdir -p cbom
          docker run --rm \
            -v "${{ github.workspace }}:/src" \
            ghcr.io/ibm/cbomkit:latest \
            /src --format json > cbom/cbom_raw.json

      - name: Upload CBOM JSON
        uses: actions/upload-artifact@v4
        with:
          name: cbom-json
          path: cbom/cbom_raw.json

  push-cbom:
    needs: cbom-scan
    runs-on: ubuntu-latest
    name: Push CBOM to Elasticsearch

    permissions:
      contents: read

    steps:
      - name: Download CBOM JSON
        uses: actions/download-artifact@v4
        with:
          name: cbom-json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install requests
        run: pip install requests

      - name: Push each asset to Elasticsearch
        env:
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
          ELASTIC_PASS: ${{ secrets.ELASTIC_PASS }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python3 - << 'EOF'
          import json, os, requests

          with open('cbom_raw.json') as f:
              cbom = json.load(f)

          url = os.environ['ELASTIC_URL']
          auth = (os.environ['ELASTIC_USER'], os.environ['ELASTIC_PASS'])
          repo = os.environ['GITHUB_REPOSITORY']

          for asset in cbom.get('cryptographic_assets', []):
              doc = {
                  'repo': repo,
                  'file': asset.get('location'),
                  'algorithm': asset.get('algorithm'),
                  'library': asset.get('library'),
                  'pq_safe': asset.get('pq_safe', False),
                  'risk_level': asset.get('risk_level', 'unknown'),
                  'scanner': cbom.get('scanner', ''),
                  'generated_at': cbom.get('bomTimestamp', '')
              }
              res = requests.post(f'{url}/cbomkit-reports/_doc', json=doc, auth=auth)
              print(res.status_code, res.text)
          EOF
