name: CBOMKit Scan and Push to Wazuh

on:
  workflow_dispatch:           # manual trigger
  schedule:
    - cron: '0 1 * * *'        # daily at 01:00 UTC

permissions:
  contents: read
  id-token: write             # if needed for auth

jobs:
  cbom_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate CBOM JSON
        id: scan
        uses: PQCA/cbomkit-action@v2.1.0
        with:
          # For Java: ensures Maven is built; for Python, skip
          args: |
            # optionally customize flags here
        # CBOM output path is in ${{ steps.scan.outputs.pattern }}

      - name: Upload CBOM manifest
        uses: actions/upload-artifact@v4
        with:
          name: cbom
          path: ${{ steps.scan.outputs.pattern }}

      - name: Push CBOM assets to Elasticsearch
        env:
          ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
          ELASTIC_USER: ${{ secrets.ELASTIC_USER }}
          ELASTIC_PASS: ${{ secrets.ELASTIC_PASS }}
        run: |
          pip install requests
          for file in $(find . -name '*.json' -path "${{ steps.scan.outputs.pattern }}" ); do
            python3 - <<EOF
import json, requests, os
cbom = json.load(open(r"$file"))
for asset in cbom.get("cryptographic_assets", []):
    doc = {
        "repo": os.environ["GITHUB_REPOSITORY"],
        "file": asset.get("location"),
        "algorithm": asset.get("algorithm"),
        "library": asset.get("library"),
        "pq_safe": asset.get("pq_safe", False),
        "risk_level": asset.get("risk_level", "unknown"),
        "scanner": cbom.get("scanner", ""),
        "generated_at": cbom.get("bomTimestamp", "")
    }
    resp = requests.post(
        f"{os.environ['ELASTIC_URL']}/cbomkit-reports/_doc",
        json=doc,
        auth=(os.environ['ELASTIC_USER'], os.environ['ELASTIC_PASS'])
    )
    print(resp.status_code, resp.text)
EOF
          done
